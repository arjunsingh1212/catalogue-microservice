syntax = "proto3";

package org.arjun.cataloguemicroservice;

option java_multiple_files = true;
option java_package = "org.arjun.cataloguemicroservice";

import "google/protobuf/empty.proto";

//Services related to Item
service ItemService {
  //Add an item to the DB
  rpc CreateItem(CreateItemRequest) returns (Item);

  //Add a stream of Items to the DB
  rpc CreateItemStream(stream CreateItemStreamRequest) returns (CreateItemStreamResponse);

  //Delete a specific Item
  rpc DeleteItem(DeleteItemRequest) returns (google.protobuf.Empty);

  //Get an specific Item
  rpc GetItem(GetItemRequest) returns (Item);
  //Get multiple items (all, of particular catalogue or of particular user)
  rpc GetItemStream(GetItemStreamRequest) returns (stream ItemStream);
}

//Services related to Catalogue
service CatalogueService {
  //Add a catalogue to the DB
  rpc CreateCatalogue(CreateCatalogueRequest) returns (Catalogue);

  //Delete a specific catalogue
  rpc DeleteCatalogue(DeleteCatalogueRequest) returns (google.protobuf.Empty);

  //Get a specific catalogue
  rpc GetCatalogue(GetCatalogueRequest) returns (Catalogue);
  //Get multiple catalogues (all, of one particular user)
  rpc GetCatalogueStream(GetCatalogueStreamRequest) returns (stream CatalogueStream);
}

//Services related to User
service UserService {
  //Add an user to DB
  rpc CreateUser(CreateUserRequest) returns (User);

  //Delete a specific user
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

  //Get a specific user
  rpc GetUser(GetUserRequest) returns (User);
  //Get all Users
  rpc GetUserStream(GetUserStreamRequest) returns (stream UserStream);
}


//User Data
message User {
  //Id of user
  string user_id = 1;
  //Name of user
  string username = 2;
}

//Request to create an user
message CreateUserRequest {
  //To send the user details to create user
  User user = 1;
}

//Request to delete a user
message DeleteUserRequest {
  //id of User
  string user_id = 1;
}

//Request to get a user's details
message GetUserRequest {
  //id of User
  string user_id = 1;
}

//Request to get all users
message GetUserStreamRequest {
  //bool variable to denote all users are need to be fetched.
  //It might seem irrelevant, but done in sync with oneof approach of filtering catalogues and items
  bool all = 1;
}

//More than one user
message UserStream {
  //List of users (To be used in stream)
  User user = 1;
}

//Catalogue Data
message Catalogue {
  //Id of catalogue
  string catalogue_id = 1;
  //Id of user whom the catalogue belongs
  string user_id = 2;
  //Name of catalogue
  string catalogue_name = 3;
  //Description for catalogue
  string description = 4;
}

//Request to create a catalogue
message CreateCatalogueRequest {
  //Send details of catalogue to be created
  Catalogue catalogue = 1;
}

//Request to delete a catalogue
message DeleteCatalogueRequest {
  //id of Catalogue
  string catalogue_id = 1;
}

//Request to get a specific catalogues
message GetCatalogueRequest {
  //id of Catalogue
  string catalogue_id = 1;
}

//Request to get catalogues based on either of the two criteria: all, of specific user
message GetCatalogueStreamRequest {
  //Selecting id based on one of the categories
  oneof selection_type_id {
    //Get all items of this specific user
    string user_id = 1;
    //Get all items
    bool all = 2;
  }
}

//More than one catalogues
message CatalogueStream {
  //List of catalogues (To be used in stream)
  Catalogue catalogue = 1;
}

//Item Data
message Item {
  //Enum for the Types of items
  enum Type {
    //Item type not known
    TYPE_UNSPECIFIED = 0;
    //Raw item type
    RAW = 1;
    //Manufactured item type
    MANUFACTURED = 2;
    //Imported item type
    IMPORTED = 3;
  };
  //Id of item
  string item_id = 1;
  //If of catalogue in which the item belongs
  string catalogue_id = 2;
  //Name of item
  string name = 3;
  //Price of item
  double price = 4;
  //Quantity or number of instances of the item
  uint32 quantity = 5;
  //Type of item
  Type type = 6;
}


//Data for item creation request
message CreateItemRequest {
  //To send item to be persisted in DB
  Item item = 1;
}

//Data for stream of item creation request
message CreateItemStreamRequest {
  //To send item to be persisted in DB
  Item item = 1;
}

//Data for stream of item creation response
message CreateItemStreamResponse {
  //Response as status message
  string status = 1;
  //Failure/Success code (0 for success)
  int32 status_code = 2;
}

//Response received after CreateItemsStreamRequest
message ItemStream {
  //List of items (to be used in stream)
  Item item = 1;
}

//Data required to delete the item
message DeleteItemRequest {
  //Sending id of item
  string item_id = 1;
}

//Request to get an item
message GetItemRequest {
  //Sending id of item
  string item_id = 1;
  //Sending id of catalogue (parent)
  string parent_catalogue_id = 2;
}

//Request to get items based on either of the three criteria: all, catalogue, user
message GetItemStreamRequest {
  //Selecting id based on one of the three categories
  oneof selection_type_id {
    //Get all items of this specific catalogue
    string catalogue_id = 1;
    //Get all items of this specific user
    string user_id = 2;
    //Get all items
    bool all = 3;
  }
}








