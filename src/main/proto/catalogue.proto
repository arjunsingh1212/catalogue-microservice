syntax="proto3";

option java_multiple_files = true;
option java_package = "org.arjun.CatalogueMicroservice";

import "google/protobuf/empty.proto";

//Services related to Item
service ItemService {
  //Add an item to the DB
  rpc CreateItem(CreateItemRequest) returns (Item);

  //Add a stream of Items to the DB
  rpc CreateItemsStream(stream CreateItemsStreamRequest) returns (ItemsStream);

  //Delete a specific Item
  rpc DeleteItem(DeleteItemRequest) returns (google.protobuf.Empty);

  //Get an specific Item
  rpc GetItem(GetItemRequest) returns (Item);
  //Get all items
  rpc GetItems(GetItemsRequest) returns (stream Items);
  //Get all items of a specific catalogue
  rpc GetItemsCatalogue(GetItemsCatalogueRequest) returns (stream ItemsCatalogue);
  //Get all items of a specific user
  rpc GetItemsUser(GetItemsUserRequest) returns (stream ItemsUser);
}

//Services related to Catalogue
service CatalogueService {
  //Add a catalogue to the DB
  rpc CreateCatalogue(CreateCatalogueRequest) returns (Catalogue);

  //Delete a specific catalogue
  rpc DeleteCatalogue(DeleteCatalogueRequest) returns (google.protobuf.Empty);

  //Get all catalogues
  rpc GetCatalogues(GetCataloguesRequest) returns (stream Catalogues);
  //Get a specific catalogue
  rpc GetCatalogue(GetCatalogueRequest) returns (Catalogue);
  //Get all catalogues of an user
  rpc GetCataloguesUser(GetCataloguesUserRequest) returns (stream CataloguesUser);
}

//Services related to User
service UserService {
  //Add an user to DB
  rpc CreateUser(CreateUserRequest) returns (User);

  //Delete a specific user
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);

  //Get a specific user
  rpc GetUser(GetUserRequest) returns (User);
  //Get all Users
  rpc GetUsers(GetUsersRequest) returns (stream Users);
}


//Request to get all users
message GetUsersRequest {
}

//User Data
message User {
  //Id of user
  int32 user_id = 1;
  //Name of user
  string username = 2;
}

//More than one user
message Users {
  //List of users (To be used in stream)
  User user = 1;
}

//Catalogue Data
message Catalogue {
  //Id of catalogue
  int32 catalogue_id = 1;
  //Id of user whom the catalogue belongs
  int32 user_id = 2;
}

//More than one catalogues
message Catalogues {
  //List of catalogues (To be used in stream)
  Catalogue catalogue = 1;
}

//More than one catalogues of specific user
message CataloguesUser {
  //List of users (To be used in stream)
  Catalogue catalogue = 1;
}

//Item Data
message Item {
  //Enum for the Types of items
  enum Type {
    //Item type not known
    TYPE_UNSPECIFIED = 0;
    //Raw item type
    RAW = 1;
    //Manufactured item type
    MANUFACTURED = 2;
    //Imported item type
    IMPORTED = 3;
  };
  //Id of item
  int32 item_id = 1;
  //If of catalogue in which the item belongs
  int32 catalogue_id = 2;
  //Name of item
  string name = 3;
  //Price of item
  int64 price = 4;
  //Quantity or number of instances of the item
  int32 quantity = 5;
  //Type of item
  Type type = 6;
}

//More than one item
message Items {
  //List of items (To be used in stream)
  Item item = 1;
}

//More than one item of some specific Catalogue
message ItemsCatalogue {
  //List of items (To be used in stream)
  Item item = 1;
}

//More than one item of some specific user
message ItemsUser {
  //List of items (To be used in stream)
  Item item = 1;
}

//Data for item creation request
message CreateItemRequest {
  // The parent resource
  string parent = 1;
  //To send item to be persisted in DB
  Item item = 2;
}

//Data for stream of item creation request
message CreateItemsStreamRequest {
  // The parent resource
  string parent = 1;
  //To send item to be persisted in DB
  Item item = 2;
}

//Response received after CreateItemsStreamRequest
message ItemsStream {
  //List of items
  repeated Item items = 1;
}

//Data required to delete the item
message DeleteItemRequest {
  //Sending name of item
  string name = 1;
}

//Request to get an item
message GetItemRequest {
  //Sending name of item
  string name = 1;
}

//Request to get all items
message GetItemsRequest {
}

//Request to get items of a specific catalogue
message GetItemsCatalogueRequest {
  //Name of Catalogue
  string name = 1;
}


//Request to get items of a specific user
message GetItemsUserRequest {
  //Name of user
  string name = 1;
}

//Request to create a catalogue
message CreateCatalogueRequest {
  // The parent resource
  string parent = 1;
  //Send details of catalogue to be created
  Catalogue catalogue = 2;
}

//Request to delete a catalogue
message DeleteCatalogueRequest {
  //name of Catalogue
  string name = 1;
}

//Request to get a specific catalogues
message GetCatalogueRequest {
  //name of Catalogue
  string name = 1;
}

//Request to get all catalogues
message GetCataloguesRequest {
}

//Request to get all catalogues of an user
message GetCataloguesUserRequest {
  //name of User whose catalogues you want to get
  string name = 1;
}

//Request to create an user
message CreateUserRequest {
  // The parent resource
  string parent = 1;
  //To send the user details to create user
  User user = 2;
}

//Request to delete a user
message DeleteUserRequest {
  //name of User
  string name = 1;
}

//Request to get a user's details
message GetUserRequest {
  //name of User
  string name = 1;
}


